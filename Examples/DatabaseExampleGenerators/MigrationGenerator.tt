<#@ template language="C#" inherits="ByClassFileGeneratorBase" #>

<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ import namespace="FluentMigrator" #>
<#@ import namespace="JetBrains.ReSharper.Psi" #>
<#@ import namespace="JetBrains.ReSharper.Psi.Util" #>
<#@ import namespace="JetBrains.Util.Extension" #>
<#@ import namespace="JetBrains.ProjectModel" #>
<#@ import namespace="JetBrains.ReSharper.Psi.CSharp.Tree" #>
<#@ import namespace="T4CodeGenerator.Generators.Core.Generators.Common" #>
<#@ import namespace="T4CodeGenerator.Generators.Core.Helpers" #>

<#@ import namespace="DatabaseExampleCore" #>


<#
    void ProcessClass(IClassLikeDeclaration @class)
    {
        string tableName = Helpers.GetTableName(@class);
        Error(string.IsNullOrEmpty(tableName), $"Type '{@class.DeclaredName}' is not valid table type.");

		#>
			this.Create.Table("<#=Helpers.GetTableName(@class)#>")
			
			<#foreach (IPropertyDeclaration property in @class.PropertyDeclarations.Where(x => !x.Type.IsCollectionLike())){#>
				<#LineBreak();#>
				.WithColumn("<#=property.DeclaredName#>")
				<#WriteColumnType(property);#>
				<#WriteNullability(property.Type);#>
				<#WritePrimaryKey(property);#>
				<#WriteForeignKey(property);#>
			<#}#>

			;
		<#
		
        foreach (IPropertyDeclaration property in @class.PropertyDeclarations)
        {
            if (property.Type.IsCollectionLike())
            {
                LineBreak();
                LineBreak();

                IType collectionElementType = 
					property.Type.GetGenericUnderlyingType(property.Type.GetTypeElement());
				IClassLikeDeclaration collectionElementTypeDeclaration = 
					collectionElementType.GetSingleDeclaration<IClassLikeDeclaration>();

                Error(collectionElementTypeDeclaration == null, $"Type '{collectionElementType.GetCSharpTypeName()}' is not valid table type.");

                ProcessClass(collectionElementTypeDeclaration);
            }
        }
    }

	void WriteColumnType(IPropertyDeclaration property)
    {
		IType type = property.Type;
        if (type.IsNullable())
        {
            type = type.GetNullableUnderlyingType();
        }

		#>
			<#if (type.IsInt()) {#>
				.AsInt32()
			<#} else if (type.IsString()) {#>
				.AsString()
			<#} else if (type.IsDateTime()) {#>
				.AsDate()
			<#} else if (type.IsTimeSpan()) {#>
				.AsTime()
			<#} else {
			    Error($"The type '{type.GetCSharpTypeName()}' of property '{property.DeclaredName}' is unknown.");
			}#>
		<#
    }

	void WriteNullability(IType propertyType)
    {
		#>
			<#if (propertyType.IsReferenceType() || propertyType.IsNullable()) {#>
				.Nullable()
			<#} else {#>
				.NotNullable()
			<#}#>
		<#
    }

	void WritePrimaryKey(IPropertyDeclaration property)
    {
		if (property.HasAttribute<PrimaryKeyAttribute>())
		{
		    #>.PrimaryKey()<#
		}
    }

	void WriteForeignKey(IPropertyDeclaration property)
    {
		if (Helpers.TryGetReferenceTableName(property, out string tableName))
		{
			#>
				.ForeignKey("<#=tableName#>", "Id")
				<#if (tableName == this.TableName) {#>
					.OnDelete(<#=typeof(Rule)#>.Cascade)
				<#}#>
			<#
		}
    }
#>

namespace <#=this.ExpectedNamespace#>
{
	[Migration(<#=this.MigrationNumber#>)]
	public class M<#=this.MigrationNumber#>_<#=this.TableName#> : <#=typeof(Migration)#>
	{
		public override void Up() 
		{ 
			<#ProcessClass(this.Class);#>
		}

		public override void Down() 
		{ 
			throw new <#=typeof(NotImplementedException)#>();
		}
	}
}

<#+
    public string TableName { get; set; }

    public int MigrationNumber { get; set; }

    public override string Name => "Full migration";
	
    public override string GetFileName() =>
        $"DatabaseExampleProject\\Migrations\\M{this.MigrationNumber}_{this.TableName}.cs";

    public override bool IsAvailableCore()
    {
        this.TableName = Helpers.GetTableName(this.Class);

        if (this.TableName == null)
        {
            return false;
        }

        IProjectFolder migrationsFolder = 
            this.DataProvider.Project.GetSubFolders().FirstOrDefault(x => x.Name == "Migrations");

        if (migrationsFolder == null)
        {
            return false;
        }

        IList<IProjectFile> migrationFiles = migrationsFolder.GetSubFiles();

        foreach (IProjectFile migrationFile in migrationFiles)
        {
            if (int.TryParse(migrationFile.Name.SubstringAfter("M").SubstringBefore("_"), out int migrationNumber))
            {
                this.MigrationNumber = Math.Max(this.MigrationNumber, migrationNumber + 1);
            }
        }

        return true;
    }
#>