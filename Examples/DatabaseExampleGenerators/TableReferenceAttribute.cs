// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DatabaseExampleGenerators
{
    using JetBrains.ReSharper.Psi;
    using JetBrains.ReSharper.Psi.CSharp.Tree;
    using T4CodeGenerator.Generators.Core.Generators.Common;
    using T4CodeGenerator.Generators.Core.Helpers;
    using DatabaseExampleCore;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\T4CodeGeneratorExamples\DatabaseExampleGenerators\TableReferenceAttribute.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class TableReferenceAttribute : ByPropertyInPlaceGeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            
            #line 10 "C:\T4CodeGeneratorExamples\DatabaseExampleGenerators\TableReferenceAttribute.tt"

    bool IsTableType(string typeName)
    {
        IClrDeclaredElement[] typeElements = 
			this.DataProvider.GetSymbolScope().GetElementsByShortName(typeName);
        foreach (IClrDeclaredElement typeElement in typeElements)
        {
            IClassLikeDeclaration declaration = typeElement.GetSingleDeclaration<IClassLikeDeclaration>();
            if (declaration != null && declaration.HasAttribute<TableAttribute>())
            {
                return true;
            }
        }

        return false;
    }

    string GetTableTypeName()
    {
        string result = this.Property.DeclaredName.Replace("Id", string.Empty);
        while (!IsTableType(result))
        {
            result = result.RemoveFirstWord();
			if (string.IsNullOrEmpty(result))
            {
				return this.Property.DeclaredName.Replace("Id", string.Empty);
            }
        }

        return result;
    }

            
            #line default
            #line hidden
            this.Write("\r\n[");
            
            #line 43 "C:\T4CodeGeneratorExamples\DatabaseExampleGenerators\TableReferenceAttribute.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Attribute<DatabaseExampleCore.TableReferenceAttribute>()));
            
            #line default
            #line hidden
            this.Write("(typeof(");
            
            #line 43 "C:\T4CodeGeneratorExamples\DatabaseExampleGenerators\TableReferenceAttribute.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTableTypeName()));
            
            #line default
            #line hidden
            this.Write("))]\r\n");
            
            #line 44 "C:\T4CodeGeneratorExamples\DatabaseExampleGenerators\TableReferenceAttribute.tt"
LineBreak();
            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 46 "C:\T4CodeGeneratorExamples\DatabaseExampleGenerators\TableReferenceAttribute.tt"

    public override string Name => "TableReference attribute";

    public override bool IsAvailableCore() => 
		this.Property.DeclaredName.EndsWith("Id") &&
        !this.Property.HasAttribute<DatabaseExampleCore.TableReferenceAttribute>();

    public override int GetPositionToInsert() => this.Property.GetTreeStartOffset().Offset;

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
