// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ExampleGenerators
{
    using JetBrains.ReSharper.Psi;
    using JetBrains.ReSharper.Psi.Tree;
    using T4CodeGenerator.Generators.Core.StructuralSearch.Attributes;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\T4CodeGeneratorExamples\ExampleGenerators\ReplaceLinqFirstInitializationExpression.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ReplaceLinqFirstInitializationExpression : ReplaceLinqFirstExpressionBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            
            #line 8 "C:\T4CodeGeneratorExamples\ExampleGenerators\ReplaceLinqFirstInitializationExpression.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Type));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 8 "C:\T4CodeGeneratorExamples\ExampleGenerators\ReplaceLinqFirstInitializationExpression.tt"
Render();
            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 10 "C:\T4CodeGeneratorExamples\ExampleGenerators\ReplaceLinqFirstInitializationExpression.tt"

	[IdentifierPlaceholder]
	public ITreeNode Variable { get; set; }

	[TypePlaceholder]
	public IType Type { get; set; }

    public override bool Visible => true;

	protected override string Pattern => "$Type$ $Variable$ = $Enumerable$.First($Argument$ => $Condition$);";

    protected override ITreeNode Target => this.Variable;

    protected override IType TargetType => this.Type;


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
